#include <SDL2/SDL.h>
#include "vector2.hpp"
#include <iostream>
#include "vector3.hpp"
#include "vector4.hpp"
#include "matrix4.hpp"
#include "graphiclib.hpp"

const static int width = 160;
const static int height = 120;

vector3 light_pos(0,0,65536*3);
vector3 light_n(0,0,65536);

class triangle{
public:
  // top point.
  vector3 p[3];
  color_t col;
  int ymin;
  int ymax;
  int delta[2][2];
  int zdelta[2][2];
  int pdx[2];
  int pdz[2];
  int yno;
  int phase;

  int smoke;
  // int z_val;
  // int dxdz;
  // int dydz;

  int draw(int *zlinebuf,graphiclib &g){
    int sx,ex;
    int sz,ez;
    int zv;
    int deltaz;
    //    std::cout <<"x[0]:"<<pdx[0]/65536<<",x[1]:"<<pdx[1]/65536<<std::endl;
    g.setbrush(col);

    if(pdx[0] >= pdx[1]){
      sx = (pdx[1])/65536;
      ex = (pdx[0]+32768)/65536;
      sz = pdz[1];
      ez = pdz[0];
    }else{
      // volatile int a = 0/0;
      sx = (pdx[0])/65536;
      ex = (pdx[1]+32768)/65536;
      sz = pdz[0];
      ez = pdz[1];
    }
    // printf("%.2f,%.2f",sz/65536.,ez/65536.);

    zv = sz;
    /*sx,ez must be 0-65535.*/
    if(sx!=ex){
      deltaz = (ez-sz)/(ex-sx);
    }else{
      deltaz = 0;
    }
    
    if(sx >= width)goto distnext;
    if(sx < 0){
      zv -= sx * deltaz;
      sx=0;
    }
    if(ex < 0)goto distnext;
    if(ex >= width){
      ex = width-1;
    }

    //      volatile int x = 0/0;
    ;
    for(int i=sx;i<ex;i++){
      ;//plot
      //      printf("%6.1f ",zv/65536.);
      zv += deltaz;
      if(zv < zlinebuf[i]){
	 zlinebuf[i] = zv;
	 smoke = min(32,(0xFFFFFF-zv)*64/256/65536);

	 g.setbrush(224+(col)*smoke/32);
	 g.putdot(i,yno+ymin);
      }
      
    }
    //    puts("");
  distnext:
    if(yno+ymin >= p[1].y){
      phase=1;
    }
    yno++;

    //    zv -= (int64_t)dxdz * (ex-sx+1+(delta[phase][0]+(pdx[0]&0xFFFF))/65536);
    // printf("prev%1.8f ",zv/256./65536.);
    //    zv += dydz;
    //    z_val = zv;

    for(int i=0;i<2;i++){
      pdx[i]+=delta[phase][i];
      pdz[i]+=zdelta[phase][i];
    }

    if(yno+ymin > ymax)return 1;
    //to be continued.
    return 0;
  }
  
  triangle(vector3 px[3],color_t col){
    int delta_top_mid;
    int delta_top_btm;
    int delta_mid_btm;
    int top_mid_x;
    int top_btm_x;
    int top_mid_z;
    int top_btm_z;
    // int delta_zx;
    // int delta_zy;
    vector3 t;
    vector3 cr;

    yno=0;
    phase = 0;
    this->col = col;
    
    
    for(int i=0;i<3;i++){
      p[i]=px[i];
    }
    if(p[0].y > p[1].y) {
      t=p[0];
      p[0]=p[1];
      p[1]=t;
    }
    if(p[0].y > p[2].y){
      t=p[0];
      p[0]=p[2];
      p[2]=t;
    }
    if(p[1].y > p[2].y){
      t=p[1];
      p[1]=p[2];
      p[2]=t;
    }
    // std::cout << "("<<p[0].x<<","<<p[0].y<<","<<p[0].z<<")"<<std::endl;
    // std::cout << "("<<p[1].x<<","<<p[1].y<<","<<p[1].z<<")"<<std::endl;
    // std::cout << "("<<p[2].x<<","<<p[2].y<<","<<p[2].z<<")"<<std::endl;

    // {
    //   vector3 a = p[2]-p[0];
    //   vector3 b = p[1]-p[0];
      
    //   printf("a=(%d,%d,%d)\n",a.x,a.y,a.z);
    //   printf("b=(%d,%d,%d)\n",b.x,b.y,b.z);

    //   a.x*=65536; b.x*=65536;
    //   a.y*=65536; b.y*=65536;
      // {
      // 	int aabs;
      // 	aabs = (unsigned int)0xFFFFFFFF/a.abs();
      // 	// printf("aabs.....................%f",aabs/65536.);
      // 	a.x = (int64_t)a.x * aabs/65536;
      // 	a.y = (int64_t)a.y * aabs/65536;
      // 	a.z = (int64_t)a.z * aabs/65536;
      // 	printf("a(%.2f,%.2f,%.2f)\n",a.x/65536.,a.y/65536.,a.z/65536.);
      // }
      // {
      // 	int babs;
      // 	babs = (unsigned int)0xFFFFFFFF/a.abs();
      // 	b.x = (int64_t)b.x * babs/65536;
      // 	b.y = (	int64_t)b.y * babs/65536;
      // 	b.z = (int64_t)b.z * babs/65536;
      // 	printf("b(%.2f,%.2f,%.2f)\n",b.x/65536.,b.y/65536.,b.z/65536.);
      // }

      // cr = cross(b,a);
      //	printf("cr.z is zero(%d,%d,%d)\n",cr.x,cr.y,cr.z);
 
    //   if(cr.z&&cr.y!=0){
    // 	{
    // 	  int crabs;
    // 	  crabs = cr.abs();
    // 	  delta_zx = int64_t(1<<8)*cr.z/cr.x;
    // 	  delta_zy = int64_t(1<<8)*cr.z/cr.y;
    // 	}
    // 	dxdz = delta_zx;
    // 	dydz = delta_zy;
    // 	printf("cr=(%.5f,%.5f,%.5f)\n",cr.x/65536.,cr.y/65536.,cr.z/65536.);
    // 	printf("(dz/dx,dz/dy)=(%.8f,%.8f)\n",delta_zx/256.,delta_zy/256.);
    //   }else{
    // 	printf("cr.z is zero(%d,%d,%d)\n",cr.x,cr.y,cr.z);
    //   }
    // }

    this->col = col;
    ymin = cymin();
    ymax = cymax();
    if(ymax>=120)ymax=120-1;

    top_btm_x = p[0].x;
    top_mid_x = p[0].x;
    top_btm_z = p[0].z;
    top_mid_z = p[0].z;

    if(p[0].y==p[1].y){
      phase=1;
      top_mid_x = p[1].x;
      top_mid_z = p[1].z;
    }

    if (ymin < 0) {
      ymin = 0;
      if (p[1].y >= 0) {
        if(p[0].y != p[1].y){
          top_mid_x = (p[1].x - p[0].x) * int64_t(p[1].y) / (p[0].y - p[1].y) + p[1].x;
          top_mid_z = (p[1].z - p[0].z) * int64_t(p[1].y) / (p[0].y - p[1].y) + p[1].z;
	}
      }else{
        if(p[1].y!=p[2].y){
          top_mid_x = (p[2].x - p[1].x) * int64_t(p[2].y) / (p[1].y - p[2].y) + p[2].x;
          top_mid_z = (p[2].z - p[1].z) * int64_t(p[2].y) / (p[1].y - p[2].y) + p[2].z;
	}
      }
      if(p[0].y != p[2].y){
        top_btm_x = (p[2].x - p[0].x ) * int64_t(p[2].y) / (p[0].y - p[2].y ) + p[2].x;
        top_btm_z = (p[2].z - p[0].z ) * int64_t(p[2].y) / (p[0].y - p[2].y ) + p[2].z;
      }
    }
    if(ymin < 0)ymin=0;
    //z_val = p[2].z*256;
  
    if(p[2].y!=p[1].y){
      delta_top_mid = int64_t(65536)*(p[1].x-p[2].x)/(p[1].y-p[2].y);
    }else{
      delta_top_mid = 0;
    }
  
    if(p[1].y!=p[0].y){
      delta_mid_btm = int64_t(65536)*(p[1].x-p[0].x)/(p[1].y-p[0].y);
    }else{
      delta_mid_btm = 0;
    }

    if(p[2].y!=p[0].y){
      delta_top_btm = int64_t(65536)*(p[2].x-p[0].x)/(p[2].y-p[0].y);
    }else{
      delta_top_btm = 0;
    }

    int zdelta_top_mid;
    int zdelta_top_btm;
    int zdelta_mid_btm;
      if(p[2].y!=p[1].y){
	zdelta_top_mid = int64_t(256)*(p[1].z-p[2].z)/(p[1].y-p[2].y);
      }else{
	zdelta_top_mid = 0;
      }

      if(p[1].y!=p[0].y){
	zdelta_mid_btm = int64_t(256)*(p[1].z-p[0].z)/(p[1].y-p[0].y);
      }else{
	zdelta_mid_btm = 0;
      }

      if(p[2].y!=p[0].y){
	zdelta_top_btm = int64_t(256)*(p[2].z-p[0].z)/(p[2].y-p[0].y);
      }else{
	zdelta_top_btm = 0;
      }
    // printf("zdelta %f %f %f\n",zdelta_top_btm/65536.,zdelta_top_mid/65536.,zdelta_mid_btm/65536.);
    
    int split_x;
    if(p[0].y != p[2].y){
      split_x = ((int64_t(p[0].x-p[2].x)*(p[1].y-p[0].y)*65536)/(p[0].y-p[2].y)+p[0].x*65536);
      // printf("\n\n");
    }else{
      split_x = p[2].x*65536;
    }

    // printf("sprit%.2f",split_x/65536.);
    
    if(p[1].x*65536 >= split_x){
      pdx[0] = top_mid_x*65536;
      pdx[1] = top_btm_x*65536;
      pdz[0] = top_mid_z*256;
      pdz[1] = top_btm_z*256;
      delta[1][0]=delta_top_mid;
      delta[1][1]=delta_top_btm;
      delta[0][0]=delta_mid_btm;
      delta[0][1]=delta_top_btm;
      zdelta[1][0]=zdelta_top_mid;
      zdelta[1][1]=zdelta_top_btm;
      zdelta[0][0]=zdelta_mid_btm;
      zdelta[0][1]=zdelta_top_btm;
      
    }else{
      pdx[0] = top_btm_x*65536;
      pdx[1] = top_mid_x*65536;
      pdz[0] = top_btm_z*256;
      pdz[1] = top_mid_z*256;
      delta[1][0]=delta_top_btm;
      delta[1][1]=delta_top_mid;
      delta[0][0]=delta_top_btm;
      delta[0][1]=delta_mid_btm;
      zdelta[1][0]=zdelta_top_btm;
      zdelta[1][1]=zdelta_top_mid;
      zdelta[0][0]=zdelta_top_btm;
      zdelta[0][1]=zdelta_mid_btm;
    }
    // printf("start @%f @%f\n",pdx[0]/65536.,pdx[1]/65536.);
    // printf("delta %f %f %f %f\n",delta[0][0]/65536.,delta[0][1]/65536.,delta[1][0]/65536.,delta[1][1]/6
  }
  
  int cymin(){
    return p[0].y;
  }

  int cymax(){
    return p[2].y;
  }
};

inline
vector3 calc_nv(const vector3 v[3]){
  vector3 n;
  int abs_n;
  int rabs;

  n = cross(v[1]-v[0],v[2]-v[0]);
  abs_n = n.abs();

  rabs = 4294967295/abs_n;
  n.x = (int64_t)n.x * rabs / 65536;
  n.y = (int64_t)n.y * rabs / 65536;
  n.z = (int64_t)n.z * rabs / 65536;

  return n;
}

int loadPower(const vector3 &light_pos,const vector3 &light_n,const vector3 obj[3]){
  int light_obj_dist;
  vector3 light_obj;
  vector3 n;
  vector3 obj_pos;
  int cos_cross;

  obj_pos = obj[0]+obj[1]+obj[2];
  obj_pos.x = obj_pos.x / 3;
  obj_pos.y = obj_pos.y / 3;
  obj_pos.z = obj_pos.z / 3;
  
  n = calc_nv(obj);

  light_obj = light_pos-obj_pos;
  light_obj_dist =  light_obj.abs();
  
  cos_cross = light_n * n;

  return (int64_t)cos_cross * light_obj_dist/65536;
}

Matrix4 loadPerspective(int fovy, int aspect,int zNear, int zFar);
void print(Matrix4 m);
void drawPoly(graphiclib g);

int graphicSDL::init(int g){
  int ret;

  gain = g;
  ret = SDL_Init(SDL_INIT_EVERYTHING);
  if(ret==-1){
    std::cerr << "error" << __LINE__ << std::endl;
    return ret;
  }

  window = SDL_CreateWindow( "game", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, width*g, height*g,SDL_WINDOW_SHOWN);
  
  if(window==NULL){
    std::cerr << "error" << __LINE__ << std::endl;
    return ret;
  }

  screen = SDL_GetWindowSurface(window);
  drawarea = SDL_CreateRGBSurface(0,width,height,32,0x00FF0000,0x0000FF00,0x000000FF,0);

  for(int i=0;i<6*6*6;i++){
    palette[i]=(i%6)*256/6;
    palette[i]|=(((i/6)%6)*256/6)<<8;
    palette[i]|=(((i/6)/6)*256/6)<<16;
  }

  for(int i=6*6*6;i<256;i++){
    palette[i]=(i-224)*256/(256-224);
    palette[i]|=((i-224)*256/(256-224))<<8;
    palette[i]|=((i-224)*256/(256-224))<<16;
  }
  return 0;
}

void graphicSDL::close(){
  SDL_DestroyWindow(window);    
}

void graphicSDL::flush(){
  // SDL_Rect src,dist;
  // src.x = 0;
  // src.y = 0;
  // src.w = width;
  // src.h = height;
  // dist.x = 0;
  // dist.y = 0;
  // dist.w = gain*width;
  // dist.h = gain*height;
  
  for(int y=0;y<height;y++){
    for(int x=0;x<width;x++){
      ((uint32_t*)drawarea->pixels)[y*width+x] = palette[vram[x+y*width]];
    }
  }

  SDL_SetSurfaceBlendMode(drawarea,SDL_BLENDMODE_NONE);
  SDL_SetSurfaceBlendMode(screen,SDL_BLENDMODE_NONE);

  SDL_BlitScaled(drawarea,NULL,screen,NULL);

  SDL_UpdateWindowSurface(window);

  SDL_Event event;
  SDL_PollEvent( &event );

  if(event.type==SDL_QUIT)exit(0);
}

const vector3_t pointvec[]={
{0,-32768,0},{23711,-14655,17227},{-9057,-14655,27874},{-29309,-14654,0},{-9057,-14655,-27874},{23711,-14655,-17227},{9057,14655,27874},{-23711,14655,17227},{-23711,14655,-17227},{9057,14655,-27874},{29309,14654,0},{0,32768,0},{-5323,-27874,16384},{13937,-27874,10126},{8614,-17227,26510},{27874,-17227,0},{13937,-27874,-10126},{-17227,-27874,0},{-22551,-17227,16384},{-5323,-27874,-16384},{-22551,-17227,-16384},{8614,-17227,-26510},{31164,0,10126},{31164,0,-10126},{0,0,32768},{19261,0,26510},{-31164,0,10126},{-19261,0,26510},{-19261,0,-26510},{-31164,0,-10126},{19261,0,-26510},{0,0,-32768},{22551,17227,16384},{-8614,17227,26510},{-27874,17227,0},{-8614,17227,-26510},{22551,17227,-16384},{5323,27874,16384},{17227,27874,0},{-13937,27874,10126},{-13937,27874,-10126},{5323,27874,-16384},
  //{0,-32768,0},{23711,-14655,17227},{-9057,-14655,27874},{-29309,-14654,0},{-9057,-14655,-27874},{23711,-14655,-17227},{9057,14655,27874},{-23711,14655,17227},{-23711,14655,-17227},{9057,14655,-27874},{29309,14654,0},{0,32768,0},{-7629,-21546,23480},{-5323,-27874,16384},{-2543,-31718,7827},{6658,-31718,4837},{13937,-27874,10126},{19974,-21546,14512},{17431,-16459,22338},{8614,-17227,26510},{-971,-16459,28318},{26632,-16459,-9674},{27874,-17227,0},{26632,-16459,9674},{6658,-31718,-4837},{13937,-27874,-10126},{19974,-21546,-14512},{-24689,-21545,0},{-17227,-27874,0},{-8230,-31718,0},{-15859,-16459,23480},{-22551,-17227,16384},{-27232,-16459,7827},{-7629,-21546,-23480},{-5323,-27874,-16384},{-2543,-31718,-7827},{-27232,-16459,-7827},{-22551,-17227,-16384},{-15859,-16459,-23480},{-971,-16459,-28318},{8614,-17227,-26510},{17431,-16459,-22338},{31347,8230,4837},{31164,0,10126},{28203,-8230,14512},{28203,-8230,-14512},{31164,0,-10126},{31347,8230,-4837},{5086,8230,31307},{0,0,32768},{-5086,-8230,31307},{22517,-8230,22338},{19261,0,26510},{14287,8230,28318},{-28203,8230,14512},{-31164,0,10126},{-31347,-8230,4837},{-14287,-8230,28318},{-19261,0,26510},{-22517,8230,22338},{-22517,8230,-22338},{-19261,0,-26510},{-14287,-8230,-28318},{-31347,-8230,-4837},{-31164,0,-10126},{-28203,8230,-14512},{14287,8230,-28318},{19261,0,-26510},{22517,-8230,-22338},{-5086,-8230,-31307},{0,0,-32768},{5086,8230,-31307},{27232,16459,7827},{22551,17227,16384},{15859,16459,23480},{971,16459,28318},{-8614,17227,26510},{-17431,16459,22338},{-26632,16459,9674},{-27874,17227,0},{-26632,16459,-9674},{-17431,16459,-22338},{-8614,17227,-26510},{971,16459,-28318},{15859,16459,-23480},{22551,17227,-16384},{27232,16459,-7827},{2543,31718,7827},{5323,27874,16384},{7629,21546,23480},{24689,21545,0},{17227,27874,0},{8230,31718,0},{-6658,31718,4837},{-13937,27874,10126},{-19974,21546,14512},{-6658,31718,-4837},{-13937,27874,-10126},{-19974,21546,-14512},{2543,31718,-7827},{5323,27874,-16384},{7629,21546,-23480},{11855,29309,-8613},{20912,23711,-8614},{14654,23711,-17227},{-4528,29309,-13937},{-1730,23711,-22550},{-11856,23711,-19260},{-14654,29309,0},{-21981,23711,-5323},{-21981,23711,5323},{-4528,29309,13937},{-11856,23711,19260},{-1730,23711,22550},{11855,29309,8613},{14654,23711,17227},{20912,23711,8614},{28240,9057,-13937},{26510,0,-19260},{21981,9057,-22551},{-4529,9057,-31164},{-10126,0,-31164},{-14654,9057,-27874},{-31038,9057,-5323},{-32768,0,0},{-31038,9057,5323},{-14654,9057,27874},{-10126,0,31164},{-4529,9057,31164},{21981,9057,22551},{26510,0,19260},{28240,9057,13937},{10126,0,-31164},{14654,-9057,-27874},{4529,-9057,-31164},{-26510,0,-19260},{-21981,-9057,-22551},{-28240,-9057,-13937},{-26510,0,19260},{-28240,-9057,13937},{-21981,-9057,22551},{10126,0,31164},{4529,-9057,31164},{14654,-9057,27874},{32768,0,0},{31038,-9057,5323},{31038,-9057,-5323},{11856,-23711,-19260},{4528,-29309,-13937},{1730,-23711,-22550},{-14654,-23711,-17227},{-11855,-29309,-8613},{-20912,-23711,-8613},{-20912,-23711,8614},{-11855,-29309,8614},{-14654,-23711,17227},{21981,-23711,-5323},{21981,-23711,5323},{14654,-29309,0},{1730,-23711,22550},{4529,-29309,13937},{11856,-23711,19260},
  // {0,-32768,0},{23711,-14655,17227},{-9057,-14655,27874},{-29309,-14654,0},{-9057,-14655,-27874},{23711,-14655,-17227},{9057,14655,27874},{-23711,14655,17227},{-23711,14655,-17227},{9057,14655,-27874},{29309,14654,0},{0,32768,0},{-7629,-21546,23480},{-5323,-27874,16384},{-2543,-31718,7827},{6658,-31718,4837},{13937,-27874,10126},{19974,-21546,14512},{17431,-16459,22338},{8614,-17227,26510},{-971,-16459,28318},{26632,-16459,-9674},{27874,-17227,0},{26632,-16459,9674},{6658,-31718,-4837},{13937,-27874,-10126},{19974,-21546,-14512},{-24689,-21545,0},{-17227,-27874,0},{-8230,-31718,0},{-15859,-16459,23480},{-22551,-17227,16384},{-27232,-16459,7827},{-7629,-21546,-23480},{-5323,-27874,-16384},{-2543,-31718,-7827},{-27232,-16459,-7827},{-22551,-17227,-16384},{-15859,-16459,-23480},{-971,-16459,-28318},{8614,-17227,-26510},{17431,-16459,-22338},{31347,8230,4837},{31164,0,10126},{28203,0,-32768},{28203,23711,-14655},{31164,-9057,-14655},{31347,-29309,-14654},{5086,-9057,-14655},{0,23711,-14655},{-5086,9057,14655},{22517,-23711,14655},{19261,-23711,14655},{14287,9057,14655},{-28203,29309,14654},{-31164,0,32768},{-31347,-7629,-21546},{-14287,-5323,-27874},{-19261,-2543,-31718},{-22517,6658,-31718},{-22517,13937,-27874},{-19261,19974,-21546},{-14287,17431,-16459},{-31347,8614,-17227},{-31164,-971,-16459},{-28203,26632,-16459},{14287,27874,-17227},{19261,26632,-16459},{22517,6658,-31718},{-5086,13937,-27874},{0,19974,-21546},{5086,-24689,-21545},{27232,-17227,-27874},{22551,-8230,-31718},{15859,-15859,-16459},{971,-22551,-17227},{-8614,-27232,-16459},{-17431,-7629,-21546},{-26632,-5323,-27874},{-27874,-2543,-31718},{-26632,-27232,-16459},{-17431,-22551,-17227},{-8614,-15859,-16459},{971,-971,-16459},{15859,8614,-17227},{22551,17431,-16459},{27232,31347,8230},{2543,31164,0},{5323,28203,-8230},{7629,28203,-8230},{24689,31164,0},{17227,31347,8230},{8230,5086,8230},{-6658,0,0},{-13937,-5086,-8230},{-19974,22517,-8230},{-6658,19261,0},{-13937,14287,8230},{-19974,-28203,8230},{2543,-31164,0},{5323,-31347,-8230},{7629,-14287,-8230},{11855,-19261,0},{20912,-22517,8230},{14654,-22517,8230},{-4528,-19261,0},{-1730,-14287,-8230},{-11856,-31347,-8230},{-14654,-31164,0},{-21981,-28203,8230},{-21981,14287,8230},{-4528,19261,0},{-11856,22517,-8230},{-1730,-5086,-8230},{11855,0,0},{14654,5086,8230},{20912,27232,16459},{28240,22551,17227},{26510,15859,16459},{21981,971,16459},{-4529,-8614,17227},{-10126,-17431,16459},{-14654,-26632,16459},{-31038,-27874,17227},{-32768,-26632,16459},{-31038,-17431,16459},{-14654,-8614,17227},{-10126,971,16459},{-4529,15859,16459},{21981,22551,17227},{26510,27232,16459},{28240,2543,31718},{10126,5323,27874},{14654,7629,21546},{4529,24689,21545},{-26510,17227,27874},{-21981,8230,31718},{-28240,-6658,31718},{-26510,-13937,27874},{-28240,-19974,21546},{-21981,-6658,31718},{10126,-13937,27874},{4529,-19974,21546},{14654,2543,31718},{32768,5323,27874},{31038,7629,21546},{31038,11855,29309},{11856,20912,23711},{4528,14654,23711},{1730,-4528,29309},{-14654,-1730,23711},{-11855,-11856,23711},{-20912,-14654,29309},{-20912,-21981,23711},{-11855,-21981,23711},{-14654,-4528,29309},{21981,-11856,23711},{21981,-1730,23711},{14654,11855,29309},{1730,14654,23711},{4529,20912,23711},{11856,28240,9057},
  // {-32768, -32768, -32768 },//0
  // {-32768, -32768,  32768 },//1
  // {-32768,  32768, -32768 },//2
  // {-32768,  32768,  32768 },//3
  // { 32768, -32768, -32768 },//4
  // { 32768, -32768,  32768 },//5
  // { 32768,  32768, -32768 },//6
  // { 32768,  32768,  32768 },//7
};

// const int wireframe[12][2]={
//   {0,1},//0
//   {0,2},//1
//   {0,4},//2
//   {1,3},//3
//   {1,5},//4
//   {2,3},//5
//   {2,6},//6
//   {3,7},//7
//   {4,5},//8
//   {4,6},//9
//   {5,7},//10
//   {6,7},//11
// };

const int polyvec[][3]={
{0,13,12,},{1,13,15,},{0,12,17,},{0,17,19,},{0,19,16,},{1,15,22,},{2,14,24,},{3,18,26,},{4,20,28,},{5,21,30,},{1,22,25,},{2,24,27,},{3,26,29,},{4,28,31,},{5,30,23,},{6,32,37,},{7,33,39,},{8,34,40,},{9,35,41,},{10,36,38,},{38,41,11,},{38,36,41,},{36,9,41,},{41,40,11,},{41,35,40,},{35,8,40,},{40,39,11,},{40,34,39,},{34,7,39,},{39,37,11,},{39,33,37,},{33,6,37,},{37,38,11,},{37,32,38,},{32,10,38,},{23,36,10,},{23,30,36,},{30,9,36,},{31,35,9,},{31,28,35,},{28,8,35,},{29,34,8,},{29,26,34,},{26,7,34,},{27,33,7,},{27,24,33,},{24,6,33,},{25,32,6,},{25,22,32,},{22,10,32,},{30,31,9,},{30,21,31,},{21,4,31,},{28,29,8,},{28,20,29,},{20,3,29,},{26,27,7,},{26,18,27,},{18,2,27,},{24,25,6,},{24,14,25,},{14,1,25,},{22,23,10,},{22,15,23,},{15,5,23,},{16,21,5,},{16,19,21,},{19,4,21,},{19,20,4,},{19,17,20,},{17,3,20,},{17,18,3,},{17,12,18,},{12,2,18,},{15,16,5,},{15,13,16,},{13,0,16,},{12,14,2,},{12,13,14,},{13,1,14,},
//{0,1,2,},{2,1,3,},{3,1,4,},{4,1,5,},{5,1,6,},{6,1,7,},{7,1,8,},{8,1,9,},{9,1,10,},{10,1,0,},
// {0,15,14,},{1,17,23,},{0,14,29,},{0,29,35,},{0,35,24,},{1,23,44,},{2,20,50,},{3,32,56,},{4,38,62,},{5,41,68,},{1,44,51,},{2,50,57,},{3,56,63,},{4,62,69,},{5,68,45,},{6,74,89,},{7,77,95,},{8,80,98,},{9,83,101,},{10,86,90,},{92,99,11,},{91,102,92,},{90,103,91,},{92,102,99,},{102,100,99,},{91,103,102,},{103,104,102,},{102,104,100,},{104,101,100,},{90,86,103,},{86,85,103,},{103,85,104,},{85,84,104,},{104,84,101,},{84,9,101,},{99,96,11,},{100,105,99,},{101,106,100,},{99,105,96,},{105,97,96,},{100,106,105,},{106,107,105,},{105,107,97,},{107,98,97,},{101,83,106,},{83,82,106,},{106,82,107,},{82,81,107,},{107,81,98,},{81,8,98,},{96,93,11,},{97,108,96,},{98,109,97,},{96,108,93,},{108,94,93,},{97,109,108,},{109,110,108,},{108,110,94,},{110,95,94,},{98,80,109,},{80,79,109,},{109,79,110,},{79,78,110,},{110,78,95,},{78,7,95,},{93,87,11,},{94,111,93,},{95,112,94,},{93,111,87,},{111,88,87,},{94,112,111,},{112,113,111,},{111,113,88,},{113,89,88,},{95,77,112,},{77,76,112,},{112,76,113,},{76,75,113,},{113,75,89,},{75,6,89,},{87,92,11,},{88,114,87,},{89,115,88,},{87,114,92,},{114,91,92,},{88,115,114,},{115,116,114,},{114,116,91,},{116,90,91,},{89,74,115,},{74,73,115,},{115,73,116,},{73,72,116,},{116,72,90,},{72,10,90,},{47,86,10,},{46,117,47,},{45,118,46,},{47,117,86,},{117,85,86,},{46,118,117,},{118,119,117,},{117,119,85,},{119,84,85,},{45,68,118,},{68,67,118,},{118,67,119,},{67,66,119,},{119,66,84,},{66,9,84,},{71,83,9,},{70,120,71,},{69,121,70,},{71,120,83,},{120,82,83,},{70,121,120,},{121,122,120,},{120,122,82,},{122,81,82,},{69,62,121,},{62,61,121,},{121,61,122,},{61,60,122,},{122,60,81,},{60,8,81,},{65,80,8,},{64,123,65,},{63,124,64,},{65,123,80,},{123,79,80,},{64,124,123,},{124,125,123,},{123,125,79,},{125,78,79,},{63,56,124,},{56,55,124,},{124,55,125,},{55,54,125,},{125,54,78,},{54,7,78,},{59,77,7,},{58,126,59,},{57,127,58,},{59,126,77,},{126,76,77,},{58,127,126,},{127,128,126,},{126,128,76,},{128,75,76,},{57,50,127,},{50,49,127,},{127,49,128,},{49,48,128,},{128,48,75,},{48,6,75,},{53,74,6,},{52,129,53,},{51,130,52,},{53,129,74,},{129,73,74,},{52,130,129,},{130,131,129,},{129,131,73,},{131,72,73,},{51,44,130,},{44,43,130,},{130,43,131,},{43,42,131,},{131,42,72,},{42,10,72,},{66,71,9,},{67,132,66,},{68,133,67,},{66,132,71,},{132,70,71,},{67,133,132,},{133,134,132,},{132,134,70,},{134,69,70,},{68,41,133,},{41,40,133,},{133,40,134,},{40,39,134,},{134,39,69,},{39,4,69,},{60,65,8,},{61,135,60,},{62,136,61,},{60,135,65,},{135,64,65,},{61,136,135,},{136,137,135,},{135,137,64,},{137,63,64,},{62,38,136,},{38,37,136,},{136,37,137,},{37,36,137,},{137,36,63,},{36,3,63,},{54,59,7,},{55,138,54,},{56,139,55,},{54,138,59,},{138,58,59,},{55,139,138,},{139,140,138,},{138,140,58,},{140,57,58,},{56,32,139,},{32,31,139,},{139,31,140,},{31,30,140,},{140,30,57,},{30,2,57,},{48,53,6,},{49,141,48,},{50,142,49,},{48,141,53,},{141,52,53,},{49,142,141,},{142,143,141,},{141,143,52,},{143,51,52,},{50,20,142,},{20,19,142,},{142,19,143,},{19,18,143,},{143,18,51,},{18,1,51,},{42,47,10,},{43,144,42,},{44,145,43,},{42,144,47,},{144,46,47,},{43,145,144,},{145,146,144,},{144,146,46,},{146,45,46,},{44,23,145,},{23,22,145,},{145,22,146,},{22,21,146,},{146,21,45,},{21,5,45,},{26,41,5,},{25,147,26,},{24,148,25,},{26,147,41,},{147,40,41,},{25,148,147,},{148,149,147,},{147,149,40,},{149,39,40,},{24,35,148,},{35,34,148,},{148,34,149,},{34,33,149,},{149,33,39,},{33,4,39,},{33,38,4,},{34,150,33,},{35,151,34,},{33,150,38,},{150,37,38,},{34,151,150,},{151,152,150,},{150,152,37,},{152,36,37,},{35,29,151,},{29,28,151,},{151,28,152,},{28,27,152,},{152,27,36,},{27,3,36,},{27,32,3,},{28,153,27,},{29,154,28,},{27,153,32,},{153,31,32,},{28,154,153,},{154,155,153,},{153,155,31,},{155,30,31,},{29,14,154,},{14,13,154,},{154,13,155,},{13,12,155,},{155,12,30,},{12,2,30,},{21,26,5,},{22,156,21,},{23,157,22,},{21,156,26,},{156,25,26,},{22,157,156,},{157,158,156,},{156,158,25,},{158,24,25,},{23,17,157,},{17,16,157,},{157,16,158,},{16,15,158,},{158,15,24,},{15,0,24,},{12,20,2,},{13,159,12,},{14,160,13,},{12,159,20,},{159,19,20,},{13,160,159,},{160,161,159,},{159,161,19,},{161,18,19,},{14,15,160,},{15,16,160,},{160,16,161,},{16,17,161,},{161,17,18,},{17,1,18,},

// {0,1,2},
// {1,0,5},
// {0,2,3},
// {0,3,4},
// {0,4,5},
// {1,5,10},
// {2,1,6},
// {3,2,7},
// {4,3,8},
// {5,4,9},
// {1,10,6},
// {2,6,7},
// {3,7,8},
// {4,8,9},
// {5,9,10},
// {6,10,11},
// {7,6,11},
// {8,7,11},
// {9,8,11},
// {10,9,11},
  // {1,0,2},
  // {1,3,2},
  // {2,3,7},
  // {7,6,2},
  // {1,3,7},
  // {1,5,7},
  // {0,1,4},
  // {1,5,4},
  // {0,2,6},
  // {0,4,6},
  // {4,5,7},
  // {4,6,7},
};

#define POLYNUM (int)(sizeof(polyvec)/sizeof(polyvec[0]))
#define POINTNUM (int)(sizeof(pointvec)/sizeof(pointvec[0]))

vector3 pv[12][3];

int main(void){
  Matrix4 m;
  Matrix4 projection;
  Matrix4 obj;

  vector3 obj_transed[POLYNUM];
  vector3 poly_transed[POLYNUM];
  
  int zlinebuf[160];
  triangle *t[POLYNUM]={};

  // pv[i][0] =  vector3(0,0,0)*65536;
  // pv[i++][1] = vector3(1,0,0)*65536;
  // pv[i][0] = vector3(0,0,0)*65536;
  // pv[i++][1] = vector3(0,1,0)*65536;
  // pv[i][0] = vector3(1,1,0)*65536;
  // pv[i++][1] = vector3(1,0,0)*65536;
  // pv[i][0] = vector3(1,1,0)*65536;
  // pv[i++][1] = vector3(0,1,0)*65536;
  
  // pv[i][0] = vector3(0,0,1)*65536;
  // pv[i++][1] = vector3(1,0,1)*65536;
  // pv[i][0] = vector3(0,0,1)*65536;
  // pv[i++][1] = vector3(0,1,1)*65536;
  // pv[i][0] = vector3(1,1,1)*65536;
  // pv[i++][1] = vector3(1,0,1)*65536;
  // pv[i][0] = vector3(1,1,1)*65536;
  // pv[i++][1] = vector3(0,1,1)*65536;

  // pv[i][0] = vector3(0,0,0)*65536;
  // pv[i++][1] = vector3(0,0,1)*65536;
  // pv[i][0] = vector3(0,1,0)*65536;
  // pv[i++][1] = vector3(0,1,1)*65536;
  // pv[i][0] = vector3(1,0,0)*65536;
  // pv[i++][1] = vector3(1,0,1)*65536;
  // pv[i][0] = vector3(1,1,0)*65536;
  // pv[i++][1] = vector3(1,1,1)*65536;

  // for(int i=0;i<12;i++){
  //   for(int j=0;j<2;j++){
  // 	pv[i][j]+=vector3(-65536/2,-65536/2,-65536/2);
  //   }
  // }
    
  //Matrix4 loadPerspective(int fovy, int aspect,int zNear, int zFar){
  int c=0;
  graphiclib sdl(160,120);

  sdl.init(2);
  sdl.screenclear();
  sdl.setbrush(255);
  // {
  //   vector3 pv[3]={vector3(30,10,0),vector3(80,40,65536),vector3(60,110,0)};
  //   triangle t(pv,0);
  //   while(!t.draw(zlinebuf,sdl)){
  //     for(int i=0;i<160;i++){
  // 	zlinebuf[i]=0x7FFFFFFF;
  //     }
  //     sdl.flush();
  //     sdl.delay(1);
  //   }
  // }
  // for(int i=0;i<300;i++){
  //   sdl.flush();
  //   sdl.delay(10);
  // }

  sdl.flush();
  projection=translation(vector3(32768,32768,0));
  projection=projection*loadPerspective(10000,65536*120/160,65536*2/3,65536*20,0,0);

  while(1){
    vector2 mouse;

    SDL_GetMouseState(&mouse.x,&mouse.y);
    mouse.x-=160;
    mouse.y-=160;
    mouse*=65536*10;
    m=projection*lookat(vector3(0,0,0),vector3(0,mouse.y,mouse.x-120000));

    //print(m);

    //      m=m*translation(vector3(0,0,65536*3))
;
    obj = rotatey(c++);
    // m=m*rotatex(5461);
    // m=m*rotatez(5461);

    //  m=m*magnify(2);
    // print(m);
      
    vector3 vo[3];
    vector3 v[3];
    
    for(int j=0;j<POINTNUM;j++){
      obj_transed[j] = obj.applyit(vector3(pointvec[j]));
      poly_transed[j] = m.applyit(obj_transed[j]);
      // std::cout<<"poly"<<pointvec[polyvec[i][j]].x/65536.<<","<<pointvec[polyvec[i][j]].y/65536.<<","<<pointvec[polyvec[i][j]].z/65536.<<std::endl;
    }
    for(int i=0;i<POLYNUM;i++){
      for(int j=0;j<3;j++){
	v[j] = poly_transed[polyvec[i][j]];
	vo[j] = obj_transed[polyvec[i][j]];
      }
      if(v[0].z &0xFFFF0000)break;
      if(v[1].z &0xFFFF0000)break;
      if(v[2].z &0xFFFF0000)break;
      
      v[0].x=v[0].x*160/65536;v[0].y=v[0].y*120/65536;
      v[1].x=v[1].x*160/65536;v[1].y=v[1].y*120/65536;
      v[2].x=v[2].x*160/65536;v[2].y=v[2].y*120/65536;
      // std::cout<<"v0 "<<v[0].x<<","<<v[0].y<<","<<v[0].z<<std::endl;
      // std::cout<<"v1 "<<v[1].x<<","<<v[1].y<<","<<v[1].z<<std::endl;
      // std::cout<<"v2 "<<v[2].x<<","<<v[2].y<<","<<v[2].z<<std::endl;
      //      std::cout<<v1.x
      //sdl.setbrush();

      if(t[i]!=NULL)
	delete t[i];
      t[i]=NULL;
      
      int light = max(0,-loadPower(light_pos,light_n,vo)/10000+8);
      if(light){
	t[i] = new triangle(v,light);
      }
      //int loadPower(const vector3 &light_pos,const vector3 &light_n,const vector3 obj[3]){
    }
    int ret;
    for(int y=0;y<120;y++){
      for(int i=0;i<160;i++){
	zlinebuf[i]=0x7FFFFFFF;
      }
      for(int i=0;i<POLYNUM;i++){
	if(t[i]&&t[i]->ymin < y&&t[i]->ymax >= y){
	  ret = t[i]->draw(zlinebuf,sdl);
	  if(ret)t[i]=0;
	}
      }
    }

    // for(int i=0;i<3;i++){
    if(c%300==0){
      sdl.flush();
      sdl.delay(10);
    }
    sdl.screenclear();
  }
}
